{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ivo/Desktop/Tutorials/Maximilaian/react course/store/cart-context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer } from \"react\";\nconst CartContext = /*#__PURE__*/React.createContext({\n  isCartOpened: () => {},\n  setIsCartOpened: () => {},\n  items: [],\n  totalAmount: 0,\n  addItem: item => {},\n  removeItem: id => {}\n});\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n  isCartOpened: false\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return _objectSpread(_objectSpread({}, defaultCartState), {}, {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    });\n  } else if (action.type === \"OPEN_CART\") {\n    return _objectSpread(_objectSpread({}, defaultCartState), {}, {\n      isCartOpened: action.value\n    });\n  }\n\n  return defaultCartState;\n};\n\nexport function CartContextProvider(props) {\n  const {\n    0: cartState,\n    1: dispatchCartAction\n  } = useReducer(cartReducer, defaultCartState);\n\n  const setIsCartOpened = value => {\n    dispatchCartAction({\n      type: \"OPEN_CART\",\n      value: value\n    });\n  };\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    isCartOpened: cartState.isCartOpened,\n    setIsCartOpened: setIsCartOpened,\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\nexport default CartContext;","map":{"version":3,"sources":["/Users/ivo/Desktop/Tutorials/Maximilaian/react course/store/cart-context.js"],"names":["React","useReducer","CartContext","createContext","isCartOpened","setIsCartOpened","items","totalAmount","addItem","item","removeItem","id","defaultCartState","cartReducer","state","action","type","updatedItems","concat","updatedTotalAmount","price","amount","value","CartContextProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","children"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACtCC,EAAAA,YAAY,EAAE,MAAM,CAAE,CADgB;AAEtCC,EAAAA,eAAe,EAAE,MAAM,CAAE,CAFa;AAGtCC,EAAAA,KAAK,EAAE,EAH+B;AAItCC,EAAAA,WAAW,EAAE,CAJyB;AAKtCC,EAAAA,OAAO,EAAGC,IAAD,IAAU,CAAE,CALiB;AAMtCC,EAAAA,UAAU,EAAGC,EAAD,IAAQ,CAAE;AANgB,CAApB,CAApB;AASA,MAAMC,gBAAgB,GAAG;AACvBN,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE,CAFU;AAGvBH,EAAAA,YAAY,EAAE;AAHS,CAAzB;;AAKA,MAAMS,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,YAAY,GAAGH,KAAK,CAACR,KAAN,CAAYY,MAAZ,CAAmBH,MAAM,CAACN,IAA1B,CAArB;AACA,UAAMU,kBAAkB,GACtBL,KAAK,CAACP,WAAN,GAAoBQ,MAAM,CAACN,IAAP,CAAYW,KAAZ,GAAoBL,MAAM,CAACN,IAAP,CAAYY,MADtD;AAEA,2CACKT,gBADL;AAEEN,MAAAA,KAAK,EAAEW,YAFT;AAGEV,MAAAA,WAAW,EAAEY;AAHf;AAKD,GATD,MASO,IAAIJ,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AACtC,2CAAYJ,gBAAZ;AAA8BR,MAAAA,YAAY,EAAEW,MAAM,CAACO;AAAnD;AACD;;AAED,SAAOV,gBAAP;AACD,CAfD;;AAiBA,OAAO,SAASW,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAAkCzB,UAAU,CAChDY,WADgD,EAEhDD,gBAFgD,CAAlD;;AAKA,QAAMP,eAAe,GAAIiB,KAAD,IAAW;AACjCI,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,WAAR;AAAqBM,MAAAA,KAAK,EAAEA;AAA5B,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMK,oBAAoB,GAAIlB,IAAD,IAAU;AACrCiB,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,KAAR;AAAeP,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMmB,yBAAyB,GAAIjB,EAAD,IAAQ;AACxCe,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBL,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMkB,WAAW,GAAG;AAClBzB,IAAAA,YAAY,EAAEqB,SAAS,CAACrB,YADN;AAElBC,IAAAA,eAAe,EAAEA,eAFC;AAGlBC,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KAHC;AAIlBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAJL;AAKlBC,IAAAA,OAAO,EAAEmB,oBALS;AAMlBjB,IAAAA,UAAU,EAAEkB;AANM,GAApB;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACM;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;AACD,eAAe5B,WAAf","sourcesContent":["import React, { useReducer } from \"react\";\n\nconst CartContext = React.createContext({\n  isCartOpened: () => {},\n  setIsCartOpened: () => {},\n  items: [],\n  totalAmount: 0,\n  addItem: (item) => {},\n  removeItem: (id) => {},\n});\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n  isCartOpened: false,\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    return {\n      ...defaultCartState,\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  } else if (action.type === \"OPEN_CART\") {\n    return { ...defaultCartState, isCartOpened: action.value };\n  }\n\n  return defaultCartState;\n};\n\nexport function CartContextProvider(props) {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const setIsCartOpened = (value) => {\n    dispatchCartAction({ type: \"OPEN_CART\", value: value });\n  };\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    isCartOpened: cartState.isCartOpened,\n    setIsCartOpened: setIsCartOpened,\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n}\nexport default CartContext;\n"]},"metadata":{},"sourceType":"module"}