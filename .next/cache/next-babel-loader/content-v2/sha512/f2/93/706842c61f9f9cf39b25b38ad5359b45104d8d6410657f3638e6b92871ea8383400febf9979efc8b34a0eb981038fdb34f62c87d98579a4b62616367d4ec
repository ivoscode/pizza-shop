{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ivo/Desktop/Tutorials/Maximilaian/react course/store/cart-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nvar CartContext = /*#__PURE__*/React.createContext({\n  isCartOpened: function isCartOpened() {},\n  setIsCartOpened: function setIsCartOpened() {},\n  items: [],\n  totalAmount: 0,\n  addItem: function addItem(item) {},\n  removeItem: function removeItem(id) {}\n});\nvar defaultCartState = {\n  items: [],\n  totalAmount: 0,\n  isCartOpened: false\n};\n\nvar cartReducer = function cartReducer(state, action) {\n  if (action.type === \"ADD\") {\n    var updatedItems = state.items.concat(action.item);\n    var updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } else if (action.type === \"OPEN_CART\") {\n    return {\n      isCartOpened: action.value\n    };\n  }\n\n  console.log(cartState);\n  return defaultCartState;\n};\n\nexport function CartContextProvider(props) {\n  _s();\n\n  var _useReducer = useReducer(cartReducer, defaultCartState),\n      cartState = _useReducer[0],\n      dispatchCartAction = _useReducer[1];\n\n  var setIsCartOpened = function setIsCartOpened(value) {\n    dispatchCartAction({\n      type: \"OPEN_CART\",\n      value: value\n    });\n  };\n\n  var addItemToCartHandler = function addItemToCartHandler(item) {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  var removeItemFromCartHandler = function removeItemFromCartHandler(id) {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  var cartContext = {\n    isCartOpened: cartState.isCartOpened,\n    setIsCartOpened: setIsCartOpened,\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartContextProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartContextProvider;\nexport default CartContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["/Users/ivo/Desktop/Tutorials/Maximilaian/react course/store/cart-context.js"],"names":["React","useReducer","CartContext","createContext","isCartOpened","setIsCartOpened","items","totalAmount","addItem","item","removeItem","id","defaultCartState","cartReducer","state","action","type","updatedItems","concat","updatedTotalAmount","price","amount","value","console","log","cartState","CartContextProvider","props","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\n\nconst CartContext = React.createContext({\n  isCartOpened: () => {},\n  setIsCartOpened: () => {},\n  items: [],\n  totalAmount: 0,\n  addItem: (item) => {},\n  removeItem: (id) => {},\n});\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n  isCartOpened: false,\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    return { items: updatedItems, totalAmount: updatedTotalAmount };\n  } else if (action.type === \"OPEN_CART\") {\n    return { isCartOpened: action.value };\n  }\n  console.log(cartState);\n  return defaultCartState;\n};\n\nexport function CartContextProvider(props) {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const setIsCartOpened = (value) => {\n    dispatchCartAction({ type: \"OPEN_CART\", value: value });\n  };\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    isCartOpened: cartState.isCartOpened,\n    setIsCartOpened: setIsCartOpened,\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n}\nexport default CartContext;\n"]},"metadata":{},"sourceType":"module"}