{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ivo/Desktop/Tutorials/Maximilaian/react course/store/cart-context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer } from \"react\";\nconst CartContext = /*#__PURE__*/React.createContext({\n  isCartOpened: () => {},\n  setIsCartOpened: () => {},\n  items: [],\n  totalAmount: 0,\n  addItem: item => {},\n  removeItem: id => {}\n});\nexport function CartContextProvider(props) {\n  const defaultCartState = {\n    items: [],\n    totalAmount: 0,\n    isCartOpened: false\n  };\n\n  const cartReducer = (state, action) => {\n    if (action.type === \"ADD\") {\n      const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n      const existingCartItemIndex = state.items.findIndex(item => {\n        console.log(item.id);\n        console.log(action.item.id);\n        return item.id === action.item.id;\n      });\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItems;\n\n      if (existingCartItem) {\n        console.log(\"dublicate item\");\n        console.log(existingCartItem);\n\n        let updatedItem = _objectSpread(_objectSpread({}, existingCartItem), {}, {\n          amount: existingCartItem.amount + action.item.amount\n        });\n\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems = state.items.concat(action.item);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      });\n    } else if (action.type === \"OPEN_CART\") {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isCartOpened: action.value\n      });\n    }\n\n    return defaultCartState;\n  };\n\n  const {\n    0: cartState,\n    1: dispatchCartAction\n  } = useReducer(cartReducer, defaultCartState);\n\n  const setIsCartOpened = value => {\n    dispatchCartAction({\n      type: \"OPEN_CART\",\n      value: value\n    });\n  };\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    isCartOpened: cartState.isCartOpened,\n    setIsCartOpened: setIsCartOpened,\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\nexport default CartContext;","map":{"version":3,"sources":["/Users/ivo/Desktop/Tutorials/Maximilaian/react course/store/cart-context.js"],"names":["React","useReducer","CartContext","createContext","isCartOpened","setIsCartOpened","items","totalAmount","addItem","item","removeItem","id","CartContextProvider","props","defaultCartState","cartReducer","state","action","type","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","console","log","existingCartItem","updatedItems","updatedItem","concat","value","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\n\nconst CartContext = React.createContext({\n  isCartOpened: () => {},\n  setIsCartOpened: () => {},\n  items: [],\n  totalAmount: 0,\n  addItem: (item) => {},\n  removeItem: (id) => {},\n});\n\nexport function CartContextProvider(props) {\n  const defaultCartState = {\n    items: [],\n    totalAmount: 0,\n    isCartOpened: false,\n  };\n  const cartReducer = (state, action) => {\n    if (action.type === \"ADD\") {\n      const updatedTotalAmount =\n        state.totalAmount + action.item.price * action.item.amount;\n\n      const existingCartItemIndex = state.items.findIndex((item) => {\n        console.log(item.id);\n        console.log(action.item.id);\n        return item.id === action.item.id;\n      });\n\n      const existingCartItem = state.items[existingCartItemIndex];\n\n      let updatedItems;\n      if (existingCartItem) {\n        console.log(\"dublicate item\");\n        console.log(existingCartItem);\n        let updatedItem = {\n          ...existingCartItem,\n          amount: existingCartItem.amount + action.item.amount,\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        updatedItems = state.items.concat(action.item);\n      }\n\n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: updatedTotalAmount,\n      };\n    } else if (action.type === \"OPEN_CART\") {\n      return { ...state, isCartOpened: action.value };\n    }\n\n    return defaultCartState;\n  };\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const setIsCartOpened = (value) => {\n    dispatchCartAction({ type: \"OPEN_CART\", value: value });\n  };\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    isCartOpened: cartState.isCartOpened,\n    setIsCartOpened: setIsCartOpened,\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n}\nexport default CartContext;\n"]},"metadata":{},"sourceType":"module"}